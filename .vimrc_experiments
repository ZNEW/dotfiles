" vim:fdm=marker
" file: .vimrc_experiments
" author: ryanoasis (Ryan L McIntyre)
" This is mostly just a dump of random trial and error vimrc settings
" and various vim experiments (especially for plugins)


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Old and/or disabled Vim Plugins {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Plugin 'majutsushi/tagbar'
" Plugin 'lilydjwg/colorizer' " temporarily disabled due to performance issues
" and seemingly not maintained anymore, now using: gorodinskiy/vim-coloresque
"Plugin 'Yggdroot/indentLine'
" dont need right now, working in vim for tabs with set list lcs=tab...
"Plugin 'endel/ctrlp-filetype.vim'
" for files that are not tracked in version control (git):
" Plugin 'chrisbra/changesPlugin' " didnt like that it conflicted with
" gitgutter (didnt seem like there was a way to have both) and the styling i didnt find too appealing
"Plugin 'koron/minimap-vim'
"Plugin 'mhinz/vim-signify' " still liking vim-gitgutter more
"Plugin 'vim-ctrlspace/vim-ctrlspace' " for testing possible vim-devicons integration

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pasting {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let &t_SI .= "\<Esc>[?2004h"
"let &t_EI .= "\<Esc>[?2004l"

"inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

"function! XTermPasteBegin()
"  set pastetoggle=<Esc>[201~
"  set paste
"  return ""
"endfunction

" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Clean-up Code {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
"autocmd BufWritePre *.js :call <SID>StripTrailingWhitespaces()
" source: http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Minimap experiments {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" test vim-external-minimap server bindings:

":nmap h h:let curwin=winnr()<CR>:keepjumps windo redraw<CR>:execute curwin . "wincmd w"<CR>
":nnoremap j j:let curwin=winnr()<CR>:keepjumps windo redraw<CR>j:execute curwin . "wincmd w"<CR>
":nmap k k:let curwin=winnr()<CR>:keepjumps windo redraw<CR>:execute curwin . "wincmd w"<CR>
":nmap l l:let curwin=winnr()<CR>:keepjumps windo redraw<CR>:execute curwin . "wincmd w"<CR>

"nmap <silent> j j | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send 'j'"<CR>
"nmap <silent> k k | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send 'k'"<CR>
"nmap <silent> <c-u> <c-u> | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send '<c-u>'"<CR>
"nmap <silent> <c-d> <c-d> | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send '<c-d>'"<CR>

" ^ these need to be mapped to a goto line on the server!

"function! externalMinimap#GotoLine(line)
function! GotoLine(line)
	"echom "gotoline called"
	"echom a:line
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . a:line . "<CR>'"
endfunction

function! MinimapOpen()
	execute "silent !gvim -R % +" . shellescape(line(".")) . ' "+set nonumber" "+set foldcolumn=0" "+set tabline=" "+set norelativenumber" "+set noruler" "+set laststatus=0" "+set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 3" "+set lines=130" "+set columns=90" --servername VIM-EXTERNAL-MINIMAP'
endfunction

function! UpdateHighlight()
	let l:start = line("w0")
	let l:end = line("w$")
	let l:centerize = "zz"
	let l:file = expand('%:t')
	"let l:matchUpdate = "match externalminimap /".'\\%'."".l:start.'l\|'.'\\%'."".l:end."l/"
	" now lets match the range: /\%>10l\&\%<14l/
	" ^ matches line 10 to 14^
	let l:matchUpdate = "match externalminimap /".'\\%>'."".l:start.'l\&'.'\\%<'."".l:end."l/"
	let l:signStartUnplaceUpdate = "sign unplace 1 file=" . l:file
	let l:signEndUnplaceUpdate = "sign unplace 2 file=" . l:file
	let l:signStartUpdate = "sign place 1 line=" . l:start . " name=wholeline file=" . l:file
	let l:signEndUpdate = "sign place 2 line=" . l:end . " name=wholeline file=" . l:file
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . l:matchUpdate . "<CR>'"
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . l:signStartUnplaceUpdate . "<CR>'"
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . l:signEndUnplaceUpdate . "<CR>'"
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . l:signStartUpdate . "<CR>'"
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . l:signEndUpdate . "<CR>'"
	execute "silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send '" . l:centerize . "<CR>'"
endfunction

" could try signs (to get it to appear the width of the window):
" :sign define wholeline linehl=ErrorMsg
" :sign place 1 line=3 name=wholeline file=aw.advancedfilters.js

function! GotoCurrentLine()
	call GotoLine(line('.'))
endfunction

function! ServerRunning()
	"execute "silent !vim --serverlist <CR>"
	let l:servers = split(system("vim --serverlist"), "\n")
	let l:running = 0
	"echom l:servers[0]
	for i in l:servers
		if i == "VIM-EXTERNAL-MINIMAP"
			"echom "running"
			let l:running = 1
		endif
	endfor
	
	if l:running == 1
		"echom "server is running, execute methods"
	else
		"echom "server is NOT running, NOT executing methods"
	endif

	return l:running
endfunction


function! MinimapUpdate()
	"echom "minimapupdate"
	if ServerRunning() == 1
		call GotoCurrentLine()
		call UpdateHighlight()
	endif
endfunction


"nmap <silent> j j | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . line('.') . "<CR>'"<CR>
"nmap <silent> k k | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . shellescape(line(".")) . "<CR>'"<CR>
"nmap <silent> <c-u> <c-u> | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . shellescape(line(".")) . "<CR>'"<CR>
"nmap <silent> <c-d> <c-d> | :execute ":silent !vim --servername VIM-EXTERNAL-MINIMAP --remote-send ':" . shellescape(line(".")) . "<CR>'"<CR>

" refactor:
" using map_bar (help map_bar)

"highlight externalminimap ctermbg=lightgray guibg=lightgray
highlight link externalminimap Visual
sign define wholeline linehl=Search


"nmap <silent> j j | :call MinimapExecute()<CR>
"nmap <silent> k k | :call MinimapExecute()<CR>
"nmap <silent> <c-u> <c-u> | :call MinimapExecute()<CR>
"nmap <silent> <c-d> <c-d> | :call MinimapExecute()<CR>
"nmap <silent> <LeftMouse> <LeftMouse> | :call MinimapExecute()<CR>
"nmap j :call GotoLine(2)<CR>

"nnoremap <silent> j j | :call MinimapExecute()<CR>
"nnoremap <silent> k k | :call MinimapExecute()<CR>
"nnoremap <silent> <c-u> <c-u> | :call MinimapExecute()<CR>
"nnoremap <silent> <c-d> <c-d> | :call MinimapExecute()<CR>

" patch/hack fix the screen flashing annoyance until proper solution?
set novisualbell

" see: help map_bar
"nnoremap <silent> j j|:call MinimapUpdate()<CR>
"nnoremap <silent> k k|:call MinimapUpdate()<CR>
"nnoremap <silent> <c-u> <c-u>|:call MinimapUpdate()<CR>
"nnoremap <silent> <c-d> <c-d>|:call MinimapUpdate()<CR>
"nnoremap <silent> <S-g> <S-g>|:call MinimapUpdate()<CR>
"nnoremap <silent> gg gg |:call MinimapUpdate()<CR>
"nnoremap <silent> <CR> <CR> |:call MinimapUpdate()<CR>

nnoremap <leader>mm :call MinimapOpen()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" JSbeautify settings {{{1
" https://github.com/maksimr/vim-jsbeautify
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:config_Beautifier = {}
"let g:config_Beautifier['js'] = {}
"let g:config_Beautifier['js'].indent_size = '4'
"let g:config_Beautifier['js'].indent_style = 'tab'
"let g:config_Beautifier['js'].brace_style = 'none'
"let g:config_Beautifier['js'].keep_array_indentation = 'true'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CSS experiments {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" eg /* .something { } */
" giving up and using CSSComb XD

" Alphabetically sort CSS properties in file with :SortCSS
":command! SortCSS :g#\({\n\)\@<=#.,/}/sort
" source: various
" source 1:
" http://code.tutsplus.com/articles/top-10-pitfalls-when-switching-to-vim--net-18113
" source 2:
" http://stackoverflow.com/questions/3050797/how-to-alphabetize-a-css-file-in-vim
" my aliases for SortCSS (just makes it easier to find in command mode)
":command! CSSSort SortCSS
":command! SortCSSBraceContents SortCSS
" to sort on just selected simply add sort! o_O , e.g. :'<,'>sort


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree experiments {{{2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" customize colours colors theme highlighting
" hi Directory guifg=#96CBFE guibg=#00ff00 ctermfg=red
" source: http://www.ur-ban.com/blog/2011/04/01/nerdtree-directory-colours/
" hi treeDir guifg=#ff0000 guibg=#00ff00 ctermfg=red

" let loaded_nerd_tree = 1
let NERDChristmasTree = 0

" NERDTress File highlighting
"function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
"" original:
" exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
" exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
" " after first ]
" "exec 'autocmd filetype nerdtree syn match ' . a:extension .' #\]\@<=.*'. a:extension .'$#'
" " trying contains on match
" "exec 'autocmd filetype nerdtree syn match ' . a:extension .' #\]\@<=.*'. a:extension .'$# contains=hideBracketsInNerdTree'
"" trying contains on keyword:
" "exec 'autocmd filetype nerdtree syn match ' . a:extension .' #\]\@<=.*'. a:extension .'$# contains=hideBracketsInNerdTreeOpen,hideBracketsInNerdTreeClose'
" " tyring contains on keyword with original match:
" "exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$# contains=hideBracketsInNerdTreeOpen,hideBracketsInNerdTreeClose'
"endfunction


" standard:
"exec 'autocmd filetype nerdtree syntax match hideBracketsInNerdTree "[\]|\[]*" conceal cchar=_'
" trying contained:
"exec 'autocmd filetype nerdtree syntax match hideBracketsInNerdTree "[\]|\[]*" contained conceal cchar=_ containedin=NERDTreeDir,NERDTreeFile'
"
"
"
" GOOD WORKING 4/12/2015 :)
"exec 'autocmd filetype nerdtree syntax match hideBracketsInNerdTree "[\]|\[]*" contained conceal cchar=_ containedin=ALL'
"
"
"
"exec 'autocmd filetype nerdtree syntax region hideBracketsInNerdTree start=/\[/ end=/\]/ conceal cchar=_'
"exec 'autocmd filetype nerdtree syntax region hideBracketsInNerdTree start=/\[.\{1,2}/ end=/\]/ conceal cchar=_'
"exec 'autocmd filetype nerdtree syntax region hideBracketsInNerdTree start=/\[/ end=/\]/ concealends cchar=_ containedin=NERDTreeDir,NERDTreeFile'
"
" GOOD WORKING 4/12/2015 :)
 "exec 'autocmd filetype nerdtree highlight hideBracketsInNerdTreeClose ctermbg=green ctermfg=none guibg=green guifg=#151515'


"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeOpen Acronym conceal cchar=_'
"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeClose LICENSE conceal cchar=_'
"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeClose LICENSE'
"
" test is working:
"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeClose LICENSE containedin=NERDTreeDir,NERDTreeFile conceal cchar=_'
"
" test is working:
"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeClose doc containedin=NERDTreeDir,NERDTreeFile'
"
"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeClose \[ containedin=NERDTreeDir,NERDTreeFile'
"exec 'autocmd filetype nerdtree syntax keyword hideBracketsInNerdTreeClose \] containedin=NERDTreeDir,NERDTreeFile'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-devicons testing area {{{2
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" testing extra-powerline-symbols
" testing rounded separators (extra-powerline-symbols):
"let g:airline_left_sep = "\uE0BA"
"let g:airline_right_sep = "\uE0BB"

" test disabling the extension
"let g:loaded_airline = 1

"let g:ctrlp_line_prefix = WebDevIconsGetFileTypeSymbol('foo.txt')

let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''

let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}

"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vue'] = '﵂'

"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = 'M'

" Replace any `[` or `]` with underscore.
" We'll hide the underscores anyways.
"syntax match hideBracketsInNerdTree "[\]|\[]*" conceal cchar=_

 "exec 'autocmd filetype nerdtree syntax match hideBracketsInNerdTree "[\]|\[]*" conceal cchar=_'

" my test look behind:
" /\]\@<=.*$
" look behind part: \@<= (in front of this is what you are looking behind of)

" test:
" /\]\@<=.*md$

" not working?
" /\]\@<=.*md$

" check ones active:
"autocmd filetype nerdtree
" clear all:
"autocmd! filetype nerdtree

"autocmd filetype nerdtree syntax match hideBracketsInNerdTree "[\]|\[]*" conceal cchar=_

" seems to be working well!
"autocmd filetype nerdtree syn match md #\]\@<=.*md$#
"autocmd filetype nerdtree syn match md #\]\@<=.*md$#

" cant seem to have both at the same time. need to ignore [ and ] on the syn
" match:

" tester
"hi tester ctermbg=green ctermfg=none guibg=green guifg=#151515
"syntax keyword tester LICENSE

" tester on nerdtree
"autocmd filetype nerdtree highlight tester ctermbg=green ctermfg=none guibg=green guifg=#151515
"autocmd filetype nerdtree syntax keyword tester LICENSE


" Must be completely hidden otherwise cursorline doesn't highlight the concealed bg color correctly.
"set conceallevel=3
"set concealcursor=nvic

"let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '
" for testing:
"let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '


"let g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol = '['
"let g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol = 'ƛ'


" Sets the font and size using font that shows special characters for Powerline
"set guifont=Consolas\ for\ Powerline\ FixedD:h11
" set guifont=Droid\ Sans\ Mono\ for\ Powerline:h11
"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 11
" working well:
"set guifont=Source\ Code\ Pro\ for\ Powerline\ 11
"set guifont=ProggyCleanTT\ Plus\ Nerd\ File\ Types\ Regular\ 14
"set guifont=ProggyCleanTT\ Regular\ 24
" check for gaps:
"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 5

"set guifont=Literation\ Mono\ Powerline\ Plus\ Nerd\ File\ Types\ 12
"set guifont=Literation\ Mono\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12
"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12
"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 12

"set guifont=Literation\ Mono\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12
"set guifont=Monaco\ Plus\ Nerd\ File\ Types\ Regular\ 12

"set guifont=IBM\ 3270\ Plus\ Nerd\ File\ Types\ 12

"set guifont=Anonymice\ Powerline\ Plus\ Nerd\ File\ Types\ 11
"set guifont=Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 11
"set guifont=Sauce\ Code\ Powerline\ 11
"set guifont=Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 12
"set guifont=Purisa,\ Droid\ Sans\ Mono\ 11,\ Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 11
"set guifont=PurisaXyz,\ Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 11
"set guifont=PurisaXyz,Purisa
"set guifont=Purisa2,\ Purisa
"set guifontwide=Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 11

" test 1000 em fonts:
"set guifont=Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 11
"set guifont=Ubuntu\ Mono\ Plus\ Nerd\ File\ Types\ 12
"set guifont=Anonymice\ Powerline\ Plus\ Nerd\ File\ Types\ Regular\ 11
"set guifont=Ubuntu\ Mono\ derivative\ Powerline\ Plus\ Nerd\ File\ Types\ Regular\ 12

"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 12

"set guifont=Courier10\ BT\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Book\ 12

"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12
"set guifont=PragmataPro\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Regular\ 12

"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ Mono\ 12

"set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 12
set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Regular\ 12
"set guifont=PragmataPro\ for\ Powerline\ Plus\ Nerd\ File\ Types\ 12
"set guifont=Fura\ Code\ Regular\ 12
"set guifont=Fira\ Code\ Retina\ Regular\ 12

"set guifont=Sauce\ Code\ Powerline\ Plus\ Nerd\ File\ Types\ 12
"set guifont=Iosevka\ Nerd\ Font\ 13
set guifont=Fantasque\ Sans\ Mono\ Nerd\ Font\ 14
"set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ Nerd\ Font\ 10

set guifont=Sauce\ Code\ Pro\ Nerd\ Font\ 14

"let g:WebDevIconsUnicodeGlyphDoubleWidth = 0

"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = '⚠'
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['js'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['db'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['less'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['styl'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['sh'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['php'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['wav'] = ''
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['diff'] = ''

" test setting folders in flags:
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
"let g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol = '愛'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

"let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
"let g:webdevicons_conceal_nerdtree_brackets = 0


" to test mac as default line endings on new files:
"set ffs=mac,unix,dos

"set regexpengine=1

" Show matching brackets when text indicator is over them
"set showmatch
" How many tenths of a second to blink when matching brackets
"set mat=8

" airline config
"let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
" source: https://github.com/bling/vim-airline/issues/534

" test not overwritting custom formatters:
"
" step 1: copy the function below to: /home/ryan/.vim/bundle/vim-airline/autoload/airline/extensions/tabline/formatters/foo.vim
"function! airline#extensions#tabline#formatters#foo#format(bufnr, buffers)
	 "return fnamemodify(bufname(a:bufnr), ':t') . ' CRAZY '
  "endfunction

" step 2: uncomment this line:
"let g:airline#extensions#tabline#formatter = 'foo'

"let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

" enable vim-airline extensions:
"let g:airline#extensions#capslock#enabled = 1
""let g:airline#extensions#example#enabled = 1
"let g:airline#extensions#whitespace#enabled = 0


"let g:NERDTreeUnicodeDecorateFileNodes = 1
"let g:NERDTreeUnicodeDecorateFileNodesDefaultSymbol = ''
"let g:NERDTreeUnicodeDecorateFileNodesExtensionSymbols = { 'styl': '', 'scss': '', 'htm': '', 'html': '', 'css': '', 'less': '', 'md': '', 'json': '', 'js': '', 'rb': '', 'php': '', 'py': '', 'coffee': '','mustache': '', 'hbs': '', 'conf': '', 'ini': '', 'yml': '', 'jpg': '', 'jpeg': '', 'bmp': '', 'png': '', 'gif': '', 'ai': '' }
"let g:NERDTreeUnicodeDecorateFileNodesExactSymbols = { 'Gruntfile.js': '', 'Gulpfile.js': '' }

"let g:NerdIconsAirlineOriginal = g:airline_section_c

"function! NerdIconInit()
"   echom 'vim enter nerd init'
"  " cache original
"  "let g:NerdIconsAirlineOriginal = g:airline_section_c
""let tabline='hey'
""let g:airline#extensions#tabline#fnamemod = 'xyz :p:. abc'
""let tabline= call %!airline#extensions#tabline#get()
"endfunction
"let g:airline#extensions#tabline#fnamemod = ':t'

" this works but is destructive:
"let originalBufferName = buffer_name("%")
" remove the \ before the double quotes:
"execute \"file \".originalBufferName.""

"let g:airline_section_c = ':D %t :O                            '
"function! NerdIconAirlineInit()
"  echom 'air init'
"  let fileNodeExtension = expand("%:e")
"  let fileNode = expand("%:s")
"  let symbol = g:NERDTreeUnicodeDecorateFileNodesDefaultSymbol
"  " cache original
"  if !exists('g:NerdIconsAirlineOriginal')
"    if exists('g:airline_section_c')
"       let g:NerdIconsAirlineOriginal = g:airline_section_c
"   else
"      let g:NerdIconsAirlineOriginal = 'BLANK'
"   endif
"  endif
"  "&ft
"  "echo expand('%:s')
"  "echom fileNodeExtension
"  "echo &ft
"  if has_key(g:NERDTreeUnicodeDecorateFileNodesExtensionSymbols, fileNodeExtension)
"    "echo g:NERDTreeUnicodeDecorateFileNodesExtensionSymbols[fileNodeExtension]
"    "echom 'has it'
"    let symbol = g:NERDTreeUnicodeDecorateFileNodesExtensionSymbols[fileNodeExtension]
"  endif

"  if has_key(g:NERDTreeUnicodeDecorateFileNodesExactSymbols, fileNode)
"    "echo g:NERDTreeUnicodeDecorateFileNodesExtensionSymbols[fileNode]
"    "echom 'has it'
"    let symbol = g:NERDTreeUnicodeDecorateFileNodesExactSymbols[fileNode]
"  endif

"let g:airline_section_c = symbol . '  ' . g:NerdIconsAirlineOriginal
"let g:airline#extensions#tabline#left_sep = symbol . ' '
"let g:airline_extensions_tabline_left_sep = symbol . ' '
""set tabline = %#airline_tabsel# %(%{airline#extensions#tabline#get_buffer_name(1)}%) %#airline_tabsel_to_airline_tabfill#%#airline_tabfill#%#airline_tabfill#%=%#airline_tabfill_to_airline_tabtype#%#airline_tabtype# buffers

""set tabline=&tabline.'a'
"endfunction

"augroup testgroup
  "autocmd VimEnter * call NerdIconInit()
  "autocmd BufWinEnter * call NerdIconInit()
  "autocmd VimEnter * call NerdIconAirlineInit()
  "autocmd BufWinEnter * call NerdIconAirlineInit()
"  autocmd BufWinEnter * call NerdIconAirlineInit()
"  autocmd VimEnter * call NerdIconAirlineInit()
"augroup end
  "autocmd BufWritePost * AirlineRefresh
  "autocmd BufWritePost * AirlineRefresh
" overrrides. probably dont wanna do that, try this:
"let g:airline_section_c = airline#section#create(['%{getcwd()}'])

"let g:airline#extensions#tabline#fnamemod = 'hey :p:.'
"call g:airline#extensions#prepend_to_section('c', "foo")

"function! airline#extensions#nerdicons#apply(...)
  "if &ft ==# "csv"
  "  call airline#extensions#prepend_to_section('gutter',
  "        \ g:airline_left_alt_sep.' %{airline#extensions#csv#get_column()}')
  "endif
"endfunction

"function! airline#extensions#nerdicons#init(ext)
"  call a:ext.add_statusline_func('airline#extensions#nerdicons#apply')
"endfunction

  "let g:airline#extensions#tabline#formatter = 'default'

  "" here is how you can define a 'foo' formatter:
  "function! g:airline#extensions#tabline#foo#format(bufnr, buffers)
  "  return fnamemodify(bufname(a:bufnr), ':t')
  "endfunction
  "let g:airline#extensions#tabline#formatter = 'foo'

"set tabline+=a
"set tabline=%#airline_tabmod# %(%{airline#extensions#tabline#get_buffer_name(1)}%) %#airline_tabmod_to_airline_tabfill#%#airline_tabfill#%#airline_tabfill#%=%#airline_tabfill_to_airline_tabtype#%#airline_tabtype# buffers

  "function! MyPlugin(...)
  "  "if &filetype == 'MyPluginFileType'
  "    let w:airline_section_a = 'MyPlugin'
  "    let w:airline_section_b = '%f'
  "    let w:airline_section_c = '%{MyPlugin#function()}'
  "    let g:airline_variable_referenced_in_statusline = 'foo'
  "  "endif
  "endfunction
  "call a:ext.add_statusline_func('MyPlugin')

  "function! NerdiconsApply(...)
  "   "if &ft ==# "csv"
  "   "   call airline#extensions#prepend_to_section('gutter',
  "   "            \ g:airline_left_alt_sep.' %{airline#extensions#csv#get_column()}')
  "   "endif
  "     let w:airline_section_a = 'MyPlugin'
  "let w:airline_section_b = '%f'
  "let w:airline_section_c = '%{MyPlugin#function()}'
  "let g:airline_variable_referenced_in_statusline = 'foo'"
  "endfunction
  "function! NerdiconsInit(ext)
  "   call a:ext.add_statusline_func('NerdiconsApply')
  "endfunction

"function! airline#extensions#tabline#get_buffer_name(nr)
"  return airline#extensions#tabline#{s:formatter}#format(a:nr, get(s:, 'current_buffer_list', s:get_buffer_list()))
"endfunction

"let orig = g:airline#extensions#tabline#left_sep
"let orig = ">"
"let g:airline#extensions#tabline#left_sep = 'WHAT' . orig
"let g:airline#extensions#tabline#left_alt_sep = 'AAA'

 "function! Foo(bufnr, buffers)
 "   return fnamemodify(bufname(a:bufnr), ':t')
 " endfunction
 " let g:airline#extensions#tabline#formatter = 'Foo'

" testing work with nerdtree-git
"let g:webdevicons_enable = 0

"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {} " needed
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rb'] = ''
" test fix to glyph artifacts:

"let g:WebDevIconsUnicodeDecorateFolderNodes = 1
"let g:DevIconsEnableFoldersOpenClose = 1
"let g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol = 'ƛ'

"autocmd filetype nerdtree echom "NT filetype"

"autocmd FileType nerdtree nnoremap <S-c> :call webdevicons#redraw()<cr>
"autocmd FileType nerdtree nmap <S-c> :call webdevicons#redraw()<cr>
"nmap <S-c> :call webdevicons#redraw()<cr>

" testing WIP ctrlp integration:

"let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
"let g:ctrlp_user_command = 'echo "hi"'        " MacOSX/Linux

"function! Function_Name_1(...)
"   "echom "Function_Name_1!"
"   "echom s:keyloop
"   "echom ctrlp_allfiles
"   "buffers
"   "echo getloclist(1)
"   "echom "line 1: " . getline(1)
"   call setline(1, "asdf")
"   "echom a:0
"   "echom a:1
"   "echom a:000 " a:000 contains a list of all arguments that were passed to the function
"   "return
"endfunction

"function! Function_Name_2(...)
"   "echom "Function_Name_2!"
"   "echom "line 1: " . getline(1)
"   "return
"endfunction

"let g:ctrlp_buffer_func = {
"    \ 'enter': 'Function_Name_1',
"    \ 'exit':  'Function_Name_2',
"    \ }

"fu! s:reformat(mrufs, ...)
"   let cwd = getcwd()
"   let cwd .= cwd !~ '[\/]$' ? ctrlp#utils#lash() : ''
"   if {s:re}
"      let cwd = exists('+ssl') ? tr(cwd, '/', '\') : cwd
"      cal filter(a:mrufs, '!stridx(v:val, cwd)')
"   en
"   if a:0 && a:1 == 'raw' | retu a:mrufs | en
"   let idx = strlen(cwd)
"   if exists('+ssl') && &ssl
"      let cwd = tr(cwd, '\', '/')
"      cal map(a:mrufs, 'tr(v:val, "\\", "/")')
"   en
"   retu map(a:mrufs, '!stridx(v:val, cwd) ? "[☘ " . WebDevIconsGetFileTypeSymbol(strpart(v:val, strridx(v:val, "/"))) . "] " . strpart(v:val, idx) : v:val')
"endf

" test: https://github.com/ryanoasis/vim-devicons/issues/140
"let g:webdevicons_enable_unite = 0

" test highlight just the glyph (icons) in nerdtree:
autocmd filetype nerdtree highlight haskell_icon ctermbg=none ctermfg=Red guifg=#ffa500
autocmd filetype nerdtree highlight html_icon ctermbg=none ctermfg=Red guifg=#ffa500
autocmd filetype nerdtree highlight go_icon ctermbg=none ctermfg=Red guifg=#ffa500

autocmd filetype nerdtree syn match haskell_icon ## containedin=NERDTreeFile
" if you are using another syn highlight for a given line (e.g.
" NERDTreeHighlightFile) need to give that name in the 'containedin' for this
" other highlight to work with it
autocmd filetype nerdtree syn match html_icon ## containedin=NERDTreeFile,html
autocmd filetype nerdtree syn match go_icon ## containedin=NERDTreeFile

"autocmd filetype nerdtree syn match haskell_icon #^\s\+.*hs$# containedin=NERDTreeFile

map <F9> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
			\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
			\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" setup
function! s:strip(input)
  return substitute(a:input, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

" current way:

function! Original115()

  let line = ' ~/www/some/big/long/jenky/path/something.something/whatever_it_is/bigUgly/path/too/long/something.vim'
  let line = substitute(line, "[-]", "", "")
  let line = s:strip(line)

endfun

" alternate way:

function! Alternate115()

  let line = ' ~/www/some/big/long/jenky/path/something.something/whatever_it_is/bigUgly/path/too/long/something.vim'

  let glyphCandidate = char2nr(strpart(line, 0, 3))
  let glyphASCIIRangeStart = 57344
  let glyphASCIIRangeEnd = 63743

  if glyphCandidate >= glyphASCIIRangeStart && glyphCandidate <= glyphASCIIRangeEnd
	 let line = strpart(line, 3)
  endif

  let line = s:strip(line)

endfun

" alternate way cached variables:

let s:glyphASCIIRangeStart = 57344
let s:glyphASCIIRangeEnd = 63743

function! AlternateCached115()

  let line = ' ~/www/some/big/long/jenky/path/something.something/whatever_it_is/bigUgly/path/too/long/something.vim'

  let glyphCandidate = char2nr(strpart(line, 0, 3))

  if glyphCandidate >= s:glyphASCIIRangeStart && glyphCandidate <= s:glyphASCIIRangeEnd
	 let line = strpart(line, 3)
  endif

  let line = s:strip(line)

endfun

" https://github.com/ryanoasis/vim-devicons/issues/133#issuecomment-206779203

"let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
"let g:webdevicons_conceal_nerdtree_brackets = 1
"let g:webdeviconsunicodeglyphdoublewidth = 2


"let g:WebDevIconsUnicodeDecorateFolderNodeDefaultSymbol = '愛'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

"let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" dynamic color scheme tweaks {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let color_scheme_guibg= synIDattr(hlID('NonText'), 'bg#')
"echom color_scheme_guibg
"exec 'hi SpecialKey guibg=' . color_scheme_guibg


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cursorlinenr based on mode {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" kinda fun but not too great
"" change cursorlinenr based on mode
"function! InsertStatuslineColor(mode)
"   echom a:mode
"  if a:mode == 'i'
"     echom 'change to i'
"    "hi cursorLineNr guibg=magenta
"    "hi link cursorLineNr iCursor
"    hi cursorLineNr ctermfg=199 ctermbg=11 guifg=#ff00aa guibg=#8fbfdc
"  elseif a:mode == 'r'
"     echom 'change to r'
"    hi cursorLineNr guibg=blue
"  else
"     echom 'change to other'
"    "hi cursorLineNr guibg=red
"    "hi link cursorLineNr NCursor
"    hi cursorLineNr ctermfg=22 guifg=#00500f guibg=#afd700
"  endif
"endfunction

"au InsertEnter * call InsertStatuslineColor(v:insertmode)
"au InsertChange * call InsertStatuslineColor(v:insertmode)
""au InsertLeave * hi cursorLineNr guibg=green
""au InsertLeave * hi link cursorLineNr NCursor
"au InsertLeave * hi cursorLineNr ctermfg=22 guifg=#00500f guibg=#afd700

"" default the statusline to green when entering Vim
""hi cursorLineNr guibg=green
""hi link cursorLineNr NCursor
"hi cursorLineNr ctermfg=22 guifg=#00500f guibg=#afd700
" source:
" http://vim.wikia.com/wiki/Change_statusline_color_to_show_insert_or_normal_mode


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-devicons AND vim-startify {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" test vim startify
"let g:startify_custom_header = 'hey'
"let g:startify_custom_header = ''
let g:startify_custom_header = ['', '']
"let g:startify_custom_header = "startify showing integration with VimDevIcons"
"let g:startify_custom_entry_display = "\" (\" . WebDevIconsGetFileTypeSymbol(entry_path) . \") \" . repeat(' ', (3 - strlen(index))) . entry_path"
"    let g:startify_custom_file_entry_display = 
"            \ "' >' . repeat(' ', (3 - strlen(index))) . entry_path"
"let g:foobar = "foo"
" hey!


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-devicons icons glyphs cropping cutting in half (https://github.com/ryanoasis/vim-devicons/issues/179) {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:webdevicons_enable_ctrlp = 0
"g:webdevicons_enable = 0
"g:loaded_webdevicons = 1

"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = '⚠'
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['txt'] = '✅'
"let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['sh'] = '😊'

" try override bufnrfilpath argument passed in removing the icon

"set noemoji

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nerdtree-git-plugin issue (https://github.com/Xuyuanp/nerdtree-git-plugin/issues/75) {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '⛌',
    \ "Unknown"   : "?"
    \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-devicons AND ctrlspace {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" simple test
let g:CtrlSpaceSymbols = { "File": "X", "CTab": "▣", "Tabs": "▢" }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" test opening NERDTree on startup {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"autocmd VimEnter * NERDTree


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctrlspace {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:CtrlSpaceSymbols = { 'File': 'X', 'CTab': '▣', 'Tabs': '▢' }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ctrlp vimdevicons issue #203 {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:airline#parts#ffenc#skip_expected_string='utf-8 '
let g:webdevicons_enable_airline_statusline_fileformat_symbols = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimdevicons issue #223 {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1

let g:DevIconsEnableNERDTreeRedraw = 1
"let g:DevIconsAppendArtifactFix = 1
"let g:webdevicons_conceal_nerdtree_brackets = 0
let g:WebDevIconsNerdTreeBeforeGlyphPadding = '  '

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vimdevicons issue #197 {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:webdevicons_enable_nerdtree = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
"let g:WebDevIconsNerdTreeAfterGlyphPadding = ''
"let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:DevIconsEnableFolderExtensionPatternMatching = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vundle {{{3
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set shell=/bin/bash

